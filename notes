
shapeless
	intro
		the type astronaut's guide to shapeless
			https://github.com/underscoreio/shapeless-guide

		shapeless
		    is a type class and dependent type based generic programming library
		    helps you abstract over arities, scrape boilerplate
		    TLP= type level programming

		TLP= type level programming (computations at compile time)
            generic type class derivation
		    ifs, loops, Nat
		    compute types
		    often libs do the job for you. e.g.: circe, finch, slick

        dependent types
                    http://gigiigig.github.io/tlp-step-by-step/introduction.html (dependent types, aux)
                    http://wheaties.github.io/Presentations/Scala-Dep-Types/dependent-types.html#/   (ifs, loops, compile-time logic)

        macros (used by shapeless under the hood)
            compile time reflection
            AST => AST (abstract syntax tree)
                https://pt.slideshare.net/johanandren/macros-and-reflection-in-scala-210
            program at compile time
                add type safety (e.g.: validate string literal at compile time)
                add performance (e.g.: assertion, logging, ...)

	core concepts
		HList, Generic
	 	Coproduct, ADTs
	putting in practice
		type classes
		Generic.Aux[T, Gen]
	debugging

	exercise
	    csv
	        https://meta.plasm.us/posts/2015/11/08/type-classes-and-generic-derivation/

	more
		LabelledGeneric, json
		type classes for operations on HLists & Coproducts
		Lazy, Aux, Poly, Nat


        prolog
            George Leontiev:    https://www.youtube.com/watch?v=iYCR2wzfdUs
            Edoardo Vacchi:     https://vimeo.com/171939792